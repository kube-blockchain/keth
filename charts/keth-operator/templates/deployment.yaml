apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{ include "keth.labels" . | nindent 4 }}
  name: {{ include "keth.fullname" . }}-controller
  namespace: {{ .Release.Namespace | quote }}
spec:
  replicas: {{ .Values.replicaCount }}
  # strategy:
  #   type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/name: {{ include "keth.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/name: {{ include "keth.name" . }}
      {{- if .Values.podLabels }}
          {{- toYaml .Values.podLabels | nindent 8 }}
      {{- end }}
      {{- if .Values.podAnnotations }}
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "keth.serviceAccountName" . }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          ports:
            - name: prometheus
              containerPort: {{ .Values.env.METRICS_PORT }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- if .Values.customResourceManagerDisabled }}
            - name: DISABLE_CUSTOM_RESOURCE_MANAGER
              value: "true"
            {{- end }}
            {{- range $name, $value := .Values.env }}
            {{- if not (empty $value) }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
            # Params for env vars populated from k8s secrets
            {{- range $key, $value := .Values.envVarsFromSecret }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretKeyRef | quote }}
                  key: {{ $value.key | quote }}
            {{- end }}
          {{- with .Values.filesFromSecret }}
          volumeMounts:
            {{- range $key, $value := . }}
            - name: {{ $key }}
              mountPath: {{ $value.mountPath }}
              readOnly: true
            {{- end }}
            {{- end }}
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.filesFromSecret }}
      volumes:
        {{- range $key, $value := . }}
        - name: {{ $key }}
          secret:
            secretName: {{ $value.secret }}
        {{- end }}
      {{- end }}
