{{- if .Values.global.bootnode.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{ include "bootnode.labels" . | nindent 4 }}
    component: {{ template "bootnode.fullname" . }}
  name: {{ template "bootnode.fullname" . }}
  namespace: {{ $.Release.Namespace }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: {{ template "ethstats.fullname" . }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: {{ template "bootnode.fullname" . }}
    spec:
      {{- with .Values.affinity }}
      affinity: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      containers:
        - args:
            - -c
            - |
              bootnode \
                --nodekey=/etc/bootnode/node.key \
                --verbosity=4
          command:
            - /bin/sh
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          name: bootnode
          ports:
            - containerPort: 30301
              name: discovery
              protocol: UDP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/bootnode
              name: data
        - args:
            - -c
            - |
              while true; do
                printf "HTTP/1.1 200 OK\n\nenode://$(bootnode -writeaddress --nodekey=/etc/bootnode/node.key)@$(POD_IP):30301" | nc -l -v -p 80 || break
              done
          command:
            - /bin/sh
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          name: bootnode-server
          ports:
            - containerPort: 80
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/bootnode
              name: data
      dnsPolicy: ClusterFirst
      initContainers:
        - args:
            - bootnode
            - --genkey=/etc/bootnode/node.key
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          name: genkey
          resources: {}
          securityContext: {{ toYaml .Values.securityContext | indent 10 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/bootnode
              name: data
        {{- if .Values.extraInitContainers }}
        # Currently some extra blocks accept strings
        # to continue with backwards compatibility this is being kept
        # whilst also allowing for yaml to be specified too.
        {{- if eq "string" (printf "%T" .Values.extraInitContainers) }}
        {{ .Values.extraInitContainers . | indent 6 }}
        {{- else }}
        {{ toYaml .Values.extraInitContainers | indent 6 }}
        {{- end }}
        {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if .Values.podSecurityContext }}
      securityContext: {{ toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.rbac.create }}
      serviceAccount: {{ template "bootnode.fullname" . }}
      {{- else }}
      serviceAccount: {{ .Values.rbac.serviceAccountName | quote }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      {{- with .Values.tolerations }}
      tolerations: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      volumes:
        - emptyDir: {}
          name: data
{{- end -}}
