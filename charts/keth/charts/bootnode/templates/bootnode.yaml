---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{ include "bootnode.labels" . | nindent 4 }}
    app: bootnode
    component: {{ template "bootnode.fullname" . }}-bootnode
  name: {{ template "bootnode.fullname" . }}-bootnode
  namespace: {{ .Release.Namespace | quote }}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: {{ template "bootnode.fullname" . }}-bootnode
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        component: {{ template "bootnode.fullname" . }}-bootnode
    spec:
      {{- with .Values.affinity }}
      affinity: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      containers:
        - args:
            - -c
            - |
              bootnode \
                --nodekey=/etc/bootnode/node.key \
                --verbosity=4
          command:
            - /bin/sh
          image: ethereum/client-go:alltools-v1.9.15
          imagePullPolicy: IfNotPresent
          name: bootnode
          ports:
            - containerPort: 30301
              name: discovery
              protocol: UDP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/bootnode
              name: data
        - args:
            - -c
            - |
              while true; do
                printf "HTTP/1.1 200 OK\n\nenode://$(bootnode -writeaddress --nodekey=/etc/bootnode/node.key)@$(POD_IP):30301" | nc -l -v -p 80 || break
              done
          command:
            - /bin/sh
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          image: ethereum/client-go:alltools-v1.9.15
          imagePullPolicy: IfNotPresent
          name: bootnode-server
          ports:
            - containerPort: 80
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/bootnode
              name: data
      dnsPolicy: ClusterFirst
      initContainers:
        - args:
            - bootnode
            - --genkey=/etc/bootnode/node.key
          image: ethereum/client-go:alltools-v1.9.15
          imagePullPolicy: IfNotPresent
          name: genkey
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/bootnode
              name: data
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if .Values.podSecurityContext }}
      securityContext: {{ toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.rbac.create }}
      serviceAccountName: {{ template "bootnode.fullname" . }}
      {{- else }}
      serviceAccountName: {{ .Values.rbac.serviceAccountName | quote }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      {{- with .Values.tolerations }}
      tolerations: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      volumes:
        - emptyDir: {}
          name: data
---
apiVersion: v1
kind: Service
metadata:
  labels: {{ include "bootnode.labels" . | nindent 4 }}
    component: {{ template "bootnode.fullname" . }}-bootnode
  name: {{ template "bootnode.fullname" . }}-bootnode
  namespace: {{ .Release.Namespace | quote }}
spec:
  ports:
    - name: discovery
      port: 30301
      protocol: UDP
      targetPort: 30301
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    component: {{ template "bootnode.fullname" . }}-bootnode
  sessionAffinity: None
  type: ClusterIP
---
{{- if or .Values.prometheus.serviceMonitor.enabled .Values.prometheus.service.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "bootnode.fullname" . }}-metrics
  labels: {{ include "bootnode.labels" . | nindent 4 }}
  {{- if .Values.prometheus.service.annotations }}
  annotations:
    {{- toYaml .Values.prometheus.service.annotations | nindent 4 }}
  {{- end }}
spec:
  selector:
    app.kubernetes.io/name: {{ template "bootnode.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  ports:
    {{- if .Values.prometheus.metricsPort }}
    - name: metrics
      port: {{ .Values.prometheus.metricsPort }}
      targetPort: {{ .Values.prometheus.metricsPort }}
    {{- else }}
    - name: http
      port: {{ .Values.host.port }}
      targetPort: {{ .Values.host.port }}
    {{- end }}
    protocol: TCP
{{ end }}
---
{{- if .Values.prometheus.serviceMonitor.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ template "bootnode.fullname" . }}
  {{- if .Values.prometheus.serviceMonitor.namespace }}
  namespace: {{ .Values.prometheus.serviceMonitor.namespace }}
  {{- end }}
  labels: {{ include "bootnode.labels" . | nindent 4 }}
    {{- if .Values.prometheus.serviceMonitor.labels }}
    {{- toYaml .Values.prometheus.serviceMonitor.labels | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "bootnode.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  namespaceSelector:
    matchNames:
      - {{ .Release.Namespace }}
  endpoints:
    {{- if .Values.prometheus.metricsPort }}
    - port: metrics
    {{- else }}
    - port: http
    {{- end }}
      interval: {{ .Values.prometheus.serviceMonitor.interval }}
      path: /metrics
{{- end -}}
