---
account:
  secretName: ""
  privateKey: ""
  secret: ""
affinity: {}
args:
  allowinsecureunlock: false
  backtrace: ""
  bloomfilter_size: ""
  bootnodes: ""
  cache: ""
  cache_database: ""
  cache_gc: ""
  cache_noprefetch: false
  cache_preimages: false
  cache_snapshot: ""
  cache_trie: ""
  cache_trie_journal: ""
  cache_trie_rejournal: ""
  config: ""
  datadir: /root/.ethereum
  datadir_ancient: ""
  datadir_minfreedisk: ""
  debug: false
  dev: ""
  dev_period: ""
  discovery_dns: ""
  ethash_cachedir: ""
  ethash_cachesinmem: ""
  ethash_cacheslockmmap: false
  ethash_cachesondisk: ""
  ethash_dagdir: ""
  ethash_dagsinmem: ""
  ethash_dagslockmmap: false
  ethash_dagsondisk: ""
  ethstats: ""
  exec: ""
  exitwhensynced: false
  fakepow: false
  gcmode: ""
  goerli: false
  gpo_blocks: ""
  gpo_maxprice: ""
  gpo_percentile: ""
  graphql: false
  graphql_corsdomain: ""
  graphql_vhosts: ""
  http: false
  http_addr: ""
  http_api: ""
  http_corsdomain: ""
  http_port: ""
  http_rpcprefix: ""
  http_vhosts: ""
  identity: ""
  ipcdisable: false
  ipcpath: ""
  jspath: ""
  keystore: ""
  light_egress: ""
  light_ingress: ""
  light_maxpeers: ""
  light_nopruning: false
  light_nosyncserve: false
  light_serve: ""
  lightkdf: false
  log_json: false
  maxpeers: ""
  maxpendpeers: ""
  metrics: false
  metrics_addr: ""
  metrics_expensive: false
  metrics_influxdb: false
  metrics_influxdb_database: ""
  metrics_influxdb_endpoint: ""
  metrics_influxdb_password: ""
  metrics_influxdb_tags: ""
  metrics_influxdb_username: ""
  metrics_port: ""
  mine: false
  miner_etherbase: ""
  miner_extradata: ""
  miner_gaslimit: ""
  miner_gasprice: ""
  miner_gastarget: ""
  miner_notify: ""
  miner_noverify: ""
  miner_recommit: ""
  miner_threads: ""
  nat: ""
  netrestrict: ""
  networkid: ""
  nocompaction: false
  nodekey: ""
  nodekeyhex: ""
  nodiscover: false
  nousb: false
  override_berlin: ""
  password: ""
  pcscdpath: ""
  port: ""
  pprof: false
  pprof_addr: ""
  pprof_blockprofilerate: ""
  pprof_cpuprofile: ""
  pprof_memprofilerate: ""
  pprof_port: ""
  preload: ""
  rinkeby: false
  ropsten: false
  rpc: false
  rpc_allowunprotectedtxs: false
  rpc_gascap: ""
  rpc_txfeecap: ""
  rpcaddr: ""
  rpcapi: ""
  rpccorsdomain: ""
  rpcport: ""
  rpcvhosts: ""
  signer: ""
  snapshot: false
  syncmode: ""
  trace: ""
  txlookuplimit: ""
  txpool_accountqueue: ""
  txpool_accountslots: ""
  txpool_globalqueue: ""
  txpool_globalslots: ""
  txpool_journal: ""
  txpool_lifetime: ""
  txpool_locals: ""
  txpool_nolocals: false
  txpool_pricebump: ""
  txpool_pricelimit: ""
  txpool_rejournal: ""
  ulc_fraction: ""
  ulc_onlyannounce: false
  ulc_servers: ""
  unlock: ""
  usb: false
  v5disc: false
  verbosity: ""
  vm_evm: ""
  vm_ewasm: ""
  vmdebug: false
  vmodule: ""
  whitelist: ""
  ws: false
  ws_addr: ""
  ws_api: ""
  ws_origins: ""
  ws_port: ""
  ws_rpcprefix: ""
  wsaddr: ""
  wsapi: ""
  yolov3: false
ethstats:
  secretName: ""
  webSocketSecret: ""
extraInitContainers: ""
genesis: {}
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: ethereum/client-go
  tag: v1.10.1
ingress:
  annotations: {}
  className: ""
  enabled: false
  extraLabels: {}
  extraPaths: []
  hosts: []
  tls: []
init:
  resources: {}


## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
livenessProbe:
  httpGet:
    path: /health/livez
    port: 8080
    scheme: HTTPS
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  failureThreshold: 2
  successThreshold: 1


metrics:
  metricsPort: false
  serviceMonitor:
    enabled: false
    interval: "30s"
    labels: {}
    namespace:
networkId: "" 
nodeSelector: {}
overrides:
  fullName: ""
  name: ""
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  size: 10Gi
  # storageClass: "-"
podAnnotations: {}


## Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
##
pdb:
  ## Annotations for Pod Disruption Budget
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  annotations: {}
  ## Set to true to enable a Pod Disruption Budget
  ##
  create: false
  ## Max number of pods that can be unavailable after the eviction
  ##
  # maxUnavailable: 1
  ## Min number of pods that must still be available after the eviction
  ##
  minAvailable: 1


podLabels: {}
podSecurityContext:
  fsGroup: 1000
priorityClassName: ""
prometheus:
  service:
    enabled: false
  serviceMonitor:
    enabled: false
    interval: "30s"
    namespace:
rbac:
  create: true
  serviceAccountAnnotations: {}
  serviceAccountName: default


## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  httpGet:
    path: /health/readyz
    port: 8080
    scheme: HTTPS
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1


replicaCount: 1
resources:
  requests:
    memory: "128Mi"
    cpu: "250m"
  limits:
    memory: "256Mi"
    cpu: "500m"
schedulerName: default-scheduler
securityContext:
  capabilities:
    drop:
      - ALL
  runAsNonRoot: true
  runAsUser: 1000
service:
  annotations: {}
  labels: {}
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  port: 80
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: true
  name:
tolerations: []

global:
  bootnode:
    enabled: true
  ethstats:
    enabled: true
  geth:
    enabled: true
